# The XML tags in the comments are used to help produce the documentation
# from the sample/reference file, and not at all at run time, where
# comments are just comments. Edit at will.

# The command line options have higher priorities than the values in
# this file.

# <filetitle>Upmpdcli configuration</filetitle>

# <grouptitle>Upmpdcli general parameters</grouptitle>

# <var name="logfilename" type="fn"><brief>Log file
# name.</brief><descr>Defaults to stderr. This can also be specified as -d
# logfilename.</descr></var>
#logfilename = 

# <var name="loglevel" type="int" values="0 5 2"><brief>Log
# level.</brief><descr>Can also be specified as -l loglevel.</descr></var>
#loglevel = 2

# <var name="upnplogfilename" type="fn">
# <brief>Log file name for the low level UPnP lib (libnpupnp).</brief>
# <descr>This log is not active if this variable is not set at all. Use an empty value for
# the messages to go to stderr.</descr>
# </var>
#upnplogfilename=

# <var name="upnploglevel" type="int" values="0 4 1">
# <brief>Log level for the low level UPnP lib.</brief>
# <descr>For historical reasons the matching values are 1 less than equivalent values for the
# upmpdcli log. 4 is very verbose.</descr>
# </var>
#upnploglevel = 2

# <var name="pkgdatadir" type="dfn"><brief>XML and other constant data storage
# directory.</brief><descr>Default: '$prefix/share/upmpdcli' (e.g.: '/usr/share/upmpdcli').
# </descr></var>
#pkgdatadir=/usr/share/upmpdcli

# <var name="pidfile" type="fn">
# <brief>Name of the lock file used to store the current process pid.</brief>
# <descr>Only used if the process is launched by user root. Used by the init system, and to avoid
# multiple instances. The only reason to change the value is if you actually want to have several
# instances running (also change cachedir in this case).</descr></var>
#pidfile = /var/run/upmpdcli.pid


# <grouptitle>UPnP network parameters</grouptitle>

# <var name="upnpiface" type="cstr" values="">
# <brief>Network interface(s) to use for UPnP.</brief>
# <descr>This can be left empty to use the first found suitable interface, or set to a single "*"
# character for using all interfaces. Else set it to a space-separated list of interface names (use
# double quotes if the names have embedded space characters).</descr></var>
#upnpiface = 

# <var name="upnpip" type="string"><brief>IP V4 address to use for UPnP, 
# alternative to using an interface name.</brief></var>
#upnpip = 

# <var name="upnpport" type="int" values="0 65635 49152"><brief>Port number
# used for UPnP.</brief><descr>libupnp/pupnp defaults to using the first
# free port after 49152. Note that clients do not need to know about the
# value, which is automatically discovered.</descr></var>
#upnpport = 

# <var name="useipv6" type="bool">
# <brief>Enable use of IPV6.</brief>
# <descr>By default we only use IPV4.</descr></var>
#useipv6 = false


# <grouptitle>Media Renderer parameters</grouptitle>

# <var name="friendlyname" type="string"><brief>"Friendly Name" for the
# Media Renderer.</brief><descr>This will be displayed by most Control
# Points to identify the Renderer. Some OpenHome Control Points may display
# the 'ohproductroom' value instead.</descr></var>
#friendlyname = UpMpd-%h

# <var name="avfriendlyname" type="string">
# <brief>Specific friendly name for the UPnP/AV Media Renderer.</brief>
# <descr>The default is to append "-av" to the friendlyname value.</descr></var>
#avfriendlyname = 

# <var name="upnpav" type="bool" values="1">
# <brief>Enable UPnP AV services (0/1).</brief>
# <descr>This is set by default, but it may useful to switch it off to avoid cluttering the Renderer
# choices if you only use OpenHome.</descr></var>
#upnpav = 1

# <var name="openhome" type="bool" values="1">
# <brief>Enable OpenHome services (0/1).</brief>
# <descr>This defaults to 1, as OpenHome queuing is superior for most usages. There should be little
# reason to turn it off.</descr></var>
#openhome = 1

# <var name="lumincompat" type="bool" values="1">
# <brief>Disable the OpenHome Credentials service.</brief>
# <descr>At some point, this was necessary to enable Lumin to see upmpdcli instances: for some
# unknown reason, Lumin 1.10 did not discover upmpdcli with Credentials enabled.</descr> </var>
#lumincompat = 0

# <var name="ohinfotexttodata" type="bool" values="1">
# <brief>Store metadata into the OpenHome "metatext" variable.</brief>
#
# <descr>The OpenHome Info service are supposed to hold different data,
# mostly for radios, with permanent radio data (icon, url, radio name) set
# in the "Metadata" variable, and information about the current title recorded
# in the "Metatext" variable. Setting this option will have upmpdcli store
# any non-empty Metatext data in the Metadata variable. This will help some
# players display the album art for the current title (e.g. Kazoo).</descr>
# </var>
#ohinfotexttodata = 0

# <var name="checkcontentformat" type="bool" values="1"><brief>Check that
# input format is supported.</brief><descr>Extract the protocolinfo
# information from the input metadata and check it against our supported
# formats. Set this option to 0 if a control point or media server sends
# good audio data with bad metadata.</descr></var>
#checkcontentformat = 0

# <var name="iconpath" type="fn"><brief>Path to the Renderer icon.</brief>
# <descr>The image will be displayed by Control Points which support
# it. The UPnP protocol has provisions for a renderer to send the URL to a
# descriptive icon as part of the device description. Due to current (and
# probably permanent) *upmpdcli* limitations, the image file *must* be a
# 64x64 32 bits-per-pixel png file. Default: '$pkgdatadir/icon.png'.
# The icon will only be read once, when upmpdcli starts
# up.</descr></var>
#iconpath = /usr/share/upmpdcli/icon.png

# <var name="saveohcredentials" type="bool"><brief>Save the streaming
# services login parameters to disk.</brief><descr>This allows sharing the
# password with the upmpdcli media server streaming service proxy, if you
# are also using it. Avoids having to enter the password in the regular
# configuration file. Depending on your situation, you may see this as a
# security risk. The default is true, because I don't see this as a real
# issue in the general case.</descr></var>
# saveohcredentials = 1

# <var name="opensslcmd" type="fn"><brief>Path to the openssl command</brief>
# <descr>The OHCredentials service needs openssl 1.1.x or newer.
# Path to the openssl command to use if the system one (in /usr/bin) is too
# old. Not set by default.</descr></var>
#opensslcmd = 

# <var name="cachedir" type="dfn"><brief>Directory used to store cached
# data</brief><descr>Only used for the OpenHome queue metadata for now.
# The default value is ~/.cache/upmpdcli for normal users or
# /var/cache/upmpdcli when upmpdcli is started as root.</descr></var>
#cachedir = /var/cache/upmpdcli

# <var name="presentationhtml" type="fn"><brief>Path to the presentation HTML
# document</brief><descr>You can change it to replace the default
# presentation page. The page will only be read once, when upmpdcli starts
# up. It can't presently be used for status updates (but I guess that you
# could put a redirect in there, to something more dynamic served by a real
# HTTP server). Default: '$pkgdatadir/presentation.html'.</descr></var>
#presentationhtml = /usr/share/upmpdcli/presentation.html

# <var name="enablel16" type="bool">
# <brief>Advertise L16 format support</brief>
# <descr>L16 is a raw linear 16 bits audio stream and the source of many
# issues because it does not include identifying information. It used to be
# disabled by default, because of an mpd bug resulting in a lot of noise. It's
# now on by default, but can still be disabled if needed. It seems that it
# sometimes interfers badly with the win10 "cast to device" feature, so you may
# try to turn it off if you have problems with this.</descr>
# </var>
#enablel16 = true

# <grouptitle>MPD parameters</grouptitle>

# <var name="mpdhost" type="string"><brief>Host MPD runs on.</brief>
# <descr>Defaults to localhost. This can also be specified as -h
# host</descr></var>
#mpdhost = localhost

# <var name="mpdport" type="int" values="0 65635 6600"><brief>IP port used by
# MPD</brief>. <descr>Can also be specified as -p port. Defaults to the
# normal MPD port, 6600</descr></var>
#mpdport = 6600

# <var name="mpdpassword" type="string"><brief>MPD
# password.</brief><descr>Password for connecting to MPD (only necessary
# if password access is enabled in the MPD configuration
# file).</descr></var>
#mpdpassword =

# <var name="mpdtimeoutms" type="int" values="0 30000 1000"><brief>MPD
# connection timeout in milliseconds.</brief>.<descr>If this is not zero,
# dialogs with mpd will timeout after the value. This will allow upmpdcli
# to stay responsive (return errors) if MPD ever becomes
# stuck.</descr></var>
#mpdtimeoutms = 2000

# <var name="ownqueue" type="bool" values="1"><brief>Set if we own the MPD
# queue.</brief>.<descr>If this is set (on by default), we own the MPD
# queue and will fearlessly clear it. Can also be specified as -q
# 0|1.</descr></var>
#ownqueue = 1



# <grouptitle>Audio control hooks</grouptitle>

# <var name="onstart" type="fn"><brief>Command to run when playback is
# about to begin.</brief><descr>Specify the full path to the program,
# e.g. /usr/bin/logger.</descr></var>
#onstart =

# <var name="onplay" type="fn"><brief>Command to run when MPD state
# switches to "PLAY".  </brief><descr>Specify the full path to the program,
# e.g. /usr/bin/logger.</descr></var>
#onplay =

# <var name="onpause" type="fn"><brief>Command to run when MPD state
# switches to "PAUSE".  </brief><descr>Specify the full path to the program,
# e.g. /usr/bin/logger.</descr></var>
#onpause =

# <var name="onstop" type="fn"><brief>Command to run when MPD state switches to
# "STOP".</brief><descr>Specify the full path to the program,
# e.g. /usr/bin/logger.</descr></var>
#onstop =

# <var name="onstandby" type="fn"><brief>Command to run when the setstandby
# action is called.</brief><descr>Specify the full path to the program. It
# is called with one 0/1 argument to change the standby state (1 for activating
# standby), and with no argument to query the state. In all cases, it should
# print the standby state (0/1) to stdout before exiting.</descr></var>
#onstandby =

# <var name="externalvolumecontrol" type="fn"><brief>Use external command
# to manage the the sound volume (0/1).</brief><descr>This is used in the
# case where MPD is unable to control the volume, but some other command
# can, for example if you have an external amp on which it is possible to
# set and read the volume through scripts. If set, the calls to MPD to set
# and read the volume will be replaced by executions of 'onvolumechange'
# and 'getexternalvolume'</descr></var>
#externalvolumecontrol = 

# <var name="getexternalvolume" type="fn"><brief>Command to run for reading
# the sound volume.</brief><descr>The command should write a 0-100 numeric
# value to stdout.</descr></var>
#getexternalvolume =

# <var name="onvolumechange" type="fn"><brief>Command to run to set the
# volume.</brief><descr>Used when 'externalvolumecontrol' is set.
# Specify the full path to the program, which is called with the volume as
# the first argument, e.g. /some/script 85.</descr></var>
#onvolumechange =

# <grouptitle>UPnP/AV tweaking</grouptitle>

# <var name="avtautoplay" type="string">
# <brief>Automatically fake a Play command when track is set.</brief>
# <descr>The UPnP/AV SetAVTransportURI, used to set the track to play,
# normally does not change the current transport state: an explicit Play
# command is required to start playing if the transport was
# stopped. Setting this parameter will synthetize a Play command after
# receiving SetAVTransportURI. This is needed by some control points which
# do not send the Play command.</descr>
# </var>
#avtautoplay = 0

# <grouptitle>OpenHome parameters</grouptitle>

# <var name="ohproductroom" type="string"><brief>The name of the room where
# the Product is located.</brief><descr>Set to "Main Room" by default,
# displayed in place of the "friendly name" by some control points.
# ProductRoom is used to group the Product with other related Products in
# the same physical room (e.g. a source with a pre-amp). Products which are
# physically linked must always share the same ProductRoom
# name.</descr></var>
#ohproductroom = Main Room

# <var name="radiolist" type="fn">
# <brief>Path to an external file with radio definitions.</brief>
#
# <descr>Radio stations can be defined in this file (main
# configuration file), or in an external file (or both). Using an external
# file can ease distribution to multiple machines, makes things clearer and
# is now the default.  See the distributed file (name below) for
# information on how to define a radio station. In case you want to define
# radios in the main configuration file, they MUST occur at the end of the
# file (because they are defined as subsections, the last of which extends
# to the end of the file).</descr>
#
# </var>
#radiolist = /usr/share/upmpdcli/radio_scripts/radiolist.conf

# <var name="radioscripts" type="fn">
# <brief>Radio metadata scripts directory.</brief>
#
# <descr>Path of a directory where the scripts used for fetching the
# channel metadata are located. The default is
# /usr/share/upmpdcli/radio_scripts. Note that the scripts are always first
# looked for in the locations defined by $PATH.</descr>
#
# </var>
#radioscripts = /usr/share/upmpdcli/radio_scripts

# <var name="ohmanufacturername" type="string"><brief>Manufacturer
# name. </brief></var>
#ohmanufacturername = UpMPDCli heavy industries Co.
# <var name="ohmanufacturerinfo" type="string"><brief>Manufacturer
# information. </brief></var>
#ohmanufacturerinfo = Such nice guys and gals
# <var name="ohmanufacturerurl" type="string"><brief>URL for manufacturer
# web site. </brief></var>
#ohmanufacturerurl = http://www.lesbonscomptes.com/upmpdcli
# <var name="ohmanufacturerimageuri" type="string"><brief>Uri for
# manufacturer's logo. </brief></var>
#ohmanufacturerimageuri =
# <var name="ohmodelname" type="string"><brief>Model name.</brief></var>
#ohmodelname = UpMPDCli UPnP-MPD gateway
# <var name="ohmodelinfo" type="string"><brief>Model information.</brief></var>
#ohmodelinfo =
# <var name="ohmodelurl" type="string"><brief>URL for model web
# site.</brief></var>
#ohmodelurl = http://www.lesbonscomptes.com/upmpdcli
# <var name="ohmodelimageuri" type="string"><brief>Uri for model's
# icon. </brief></var>
#ohmodelimageuri =
# <var name="ohproductname" type="string"><brief>User-visible product
# name. By default this is set to ModelName.</brief></var>
#ohproductname = Upmpdcli
# <var name="ohproductinfo" type="string"><brief>Product information.
# </brief></var>
#ohproductinfo =
# <var name="ohproducturl" type="string"><brief>URL for product web
# site. This may be the UPnP presentation page.</brief></var>
#ohproducturl =
# <var name="ohproductimageuri" type="string"><brief>Uri for product
# image. </brief></var>
#ohproductimageuri =
# <var name="ohmetapersist" type="bool" values="1"><brief>Save queue
# metadata to disk (0/1).</brief><descr>This allows persistence of the
# metadata information across restarts, the default is 1, and there is no
# reason to turn it off.</descr></var>
#ohmetapersist = 1
# <var name="ohmetasleep" type="int" values="0 120 0"><brief>Mimimum
# interval (Seconds) between two cache saves.</brief><descr>Increasing this
# may improve playlist load speed on a slow device. The default is to start
# a new save as soon as the previous one is done (if the list changed again
# inbetween).</descr></var>
#ohmetasleep = 0


# <grouptitle>Media Server general parameters</grouptitle>

# <var name="msfriendlyname" type="string"><brief>Friendly name for the
# Media Server (if enabled).</brief><descr>The default is to append
# "-mediaserver" to the friendlyname value.</descr></var>
#msfriendlyname = 

# <var name="msrootalias" type="string">
# <brief>Media Server root alias Object ID.</brief>
# <descr>Use the specified Media Server container as root. The Control Point will directly show this
# container when connecting, which will avoid having to skip over the top levels if you don't use
# them. (E.g. the active plugin list if there is only one plugin). The value is an UPnP object
# ID, which is unfortunately not generally obtainable from Control Points. However the commonly
# useful values are simple:
#   - `0$uprcl$` Direct access to the Local Media root
#   - `0$uprcl$folders` Direct access to the Local Media [folders] tree.
#
# An alias must begin with `0` (which is the mandatory UPnP root object ID), followed by
# `$pluginname$` where _pluginname_ could be any subdirectory of `/usr/share/upmpdcli/cdplugins`
# except `pycommon` (e.g. `uprcl`, `qobuz`, `upradios`...), and the rest would depend on the plugin
# type.
# </descr></var>
#msrootalias = 

# <var name="plgmicrohttphost" type="string">
# <brief>Hostname/IP address used in proxy URLs.</brief>
# <descr>The default is to use the same host/address as the UPnP
# server. Using localhost/127.0.0.1 instead loses the ability to stream to
# a remote renderer, but allows for portable playlists.</descr></var>
#plgmicrohttphost = 

# <var name="plgmicrohttpport" type="int" values="1 65535 49149">
# <brief>IP port for the tidal/qobuz local HTTP service.</brief>
# <descr>The URLs for tracks streamed from these services point to a local
# microhttpd server running on this port (it uses redirection to the actual
# service URL when actually streaming). The default is 49149.</descr></var>
#plgmicrohttpport = 49149

# <var name="plgproxymethod" type="string" values="proxy redirect">
# <brief>Decide if we proxy (copy: fetch/serve), or redirect the streaming
# services streams.</brief><descr>Using redirect is much more efficient,
# but the proxy has a facility to retry when a stream is dropped by the
# service, which seems to happen esp. with Qobuz.</descr></var>
#plgproxymethod = redirect

# <var name="msiconpath" type="fn">
# <brief>Path to the Media Server icon.</brief>
# <descr>The image will be displayed by Control Points which support
# it. Due to current (and probably permanent) *upmpdcli* limitations, the
# image file *must* be a 64x64 32 bits-per-pixel png file. Default: '$pkgdatadir/icon.png'.
# The icon will only be read once, when upmpdcli starts up.</descr></var>
#msiconpath = /usr/share/upmpdcli/icon.png

# <var name="webserverdocumentroot" type="string">
# <brief>Path from which the UPnP HTTP server will serve files: 0:none, 1:auto, abs. path: use
# it.</brief> 
# <descr>Some Mediaserver plugins need it, e.g. for serving icon files or cached data. The default
# value is 1, resulting into an actual path of /var/cache/upmpdcli/www or ~/.cache/upmpdcli/www.
# </descr></var>
#webserverdocumentroot = 1

# <grouptitle>Highresaudio streaming service parameters</grouptitle>

# <var name="hrauser" type="string"><brief>Hra user name.</brief>
# <descr>Your Hra login name.</descr></var>
#hrauser = your hra user name
# <var name="hrapass" type="string"><brief>Hra password.</brief>
# <descr>The password for your Hra account.</descr></var>
#hrapass = your Hra password
# <var name="hralang" type="string"><brief>Hra language setting
# (en/de).</brief> <descr>Some Highresaudio messages will be set in the
# appropriate language.</descr></var>
#hralang = en
# <var name="hratitle" type="string"> <brief>Plugin Title.</brief><descr>This
# will be displayed as the plugin entry in the Media Server root
# directory.</descr></var>
#hratitle = Highres Audio


# <grouptitle>Qobuz streaming service parameters</grouptitle>

# <var name="qobuzuser" type="string"><brief>Qobuz user name.</brief>
# <descr>Your Qobuz login name.</descr></var>
#qobuzuser = me@some.place
# <var name="qobuzpass" type="string"><brief>Qobuz password.</brief>
# <descr>The password for your Qobuz account.</descr></var>
#qobuzpass = agoodpassword
# <var name="qobuzformatid" type="cstr" values="5 6 7 27">
# <brief>Qobuz stream quality.</brief>
# <descr>5 for mp3/320, 6 for FLAC, 7 FLAC 24/96, 27 for hi-res (if your subscription
# allows streaming each of the formats).</descr></var>
#qobuzformatid = 6
# <var name="qobuzrenumtracks" type="bool">
# <brief>Qobuz track renumbering.</brief>
# <descr>Renumber tracks by counting elements, avoiding issues with Kodi. Enabled by default.</descr></var>
#qobuzrenumtracks = 1
# <var name="qobuzexplicititemnumbers" type="bool">
# <brief>Explicit item numbers in brackets.</brief>
# <descr>Add item numbers in square brackes in lists, mostly for kodi compatibility/usability. Disabled by default.</descr></var>
#qobuzexplicititemnumbers = 0
# <var name="qobuzprependartisttoalbum" type="bool">
# <brief>Artist name before albums in album lists.</brief>
# <descr>Prepend artist to album in album lists, mostly for kodi compatibility/usability. Disabled by default.</descr></var>
#qobuzprependartisttoalbum = 0
# <var name="qobuztitle" type="string"> <brief>Plugin Title.</brief><descr>This
# will be displayed as the plugin entry in the Media Server root
# directory.</descr></var>
#qobuztitle = Qobuz

# <grouptitle>Tidal streaming service parameters</grouptitle>

# <var name="tidaluser" type="string"><brief>Bogus user name variable.</brief>
# <descr>Decides if the service should be started. Set it to any arbitrary value.</descr></var>
#tidaluser = tidal
# <var name="tidaltokentype" type="string"><brief>Oath2 authentication token type.</brief>
# <descr>The type of token used for OAUTH2 authentication, typically Bearer.</descr></var>
# <var name="tidalaudioquality" type="cstr" values="LOW HIGH LOSSLESS HI_RES HI_RES_LOSSLESS">
# <brief>Tidal maximum stream quality.</brief>
# <descr>LOW for mp3/96, HIGH for mp3/320, LOSSLESS for FLAC 16/44, HI_RES for FLAC up to 24/48,
# HI_RES_LOSSLESS for hi-res FLAC files (if your subscription allows streaming each of the
# formats).</descr></var>
#tidalaudioquality = LOSSLESS
# <var name="tidaltitle" type="string">
# <brief>Plugin Title.</brief>
# <descr>This will be displayed as the plugin entry in the Media Server root
# directory.</descr></var>
#tidaltitle = Tidal
# <var name="tidalprependnumberinitemlist" type="bool">
# <brief>Use item numbers in album lists for kodi compatibility</brief>
# <descr>Kodi always tries to sort things, with this parameter we force it to show
# the entries in the desired order.</descr></var>
#tidalprependnumberinitemlist = 0
# <var name="tidalenableimagecaching" type="bool">
# <brief>Enables image caching, requires webdocumentroot</brief>
# <descr>Allows the plugin to cache images for Artists and Albums, requires
# webdocumentroot and some disk space, recommended</descr></var>
#tidalenableimagecaching = 0
# <var name="tidalsearchlimit" type="int" values="1 1000 15">
# <brief>Tidal search limit</brief>
# <descr>Set the maximum numbers of items returned by search, defaults to 15</descr></var>
#tidalsearchlimit = 15
# <var name="tidaloverridecountrycode" type="string">
# <brief>Override the country code.</brief>
# <descr>This will allow you to specify the desired two-letter country code.
# When not specified, it should default to the country code of the profile.</descr></var>
#tidaloverridecountrycode = US

# <grouptitle>UPRCL Local Media Server parameters</grouptitle>

# <var name="uprcluser" type="string">
# <brief>Bogus user name variable.</brief>
# <descr>Used for consistency with other Media Server plugins to decide if the service should be
# started (so, do set it if you want a Media Server). You probably also want to set uprclautostart=1
# so that initialisation starts as soon as the program does.</descr></var>
#uprcluser = bugsbunny

# <var name="uprcltitle" type="string"> <brief>Plugin Title.</brief><descr>This
# will be displayed as the plugin entry in the Media Server root
# directory.</descr></var>
#uprcltitle = Uprcl
uprcltitle = Local Music

# <var name="uprclmediadirs" type="string">
# <brief>Media directories</brief>
# <descr>This is a space-separated list of directories to explore for music
# files. This is used directly as the recoll "topdirs" value, so you can use
# double-quote quoting for paths with embedded spaces. If not set, we will try
# to use contentDirs from the Minim config. An error will occur if both are
# empty.</descr>
# </var>
#uprclmediadirs = 

# <var name="uprclnoradioconf" type="bool">
# <brief>Don't make the local radio list as a playlist.</brief>
#
# <descr>By default, uprcl will process the local radio list and make it available as a playlist (in
# the Playlists top container). This can slow down the initialisation and is useless if the upradios
# plugin is also running, so you can disable it with this variable.</descr>
# </var>
#uprclnoradioconf = 0

# <var name="uprclhostport" type="string">
# <brief>Uprcl HTTP server host and port for serving media files.</brief>
# <descr>Uprcl uses a separate HTTP server based on the Python Bottle framework
# and Waitress server. The HTTP server will listen on this address and port, which
# will also be inserted on the URLs we produce. If the variable is not set, we
# will use port 9090 and the same address as the server used for other services
# (either plgmicrohttphost or the first ipv4 address used by the upnp layer.
# not. Example: 192.168.1.1:9090. As it is reasonable to use the same address as
# the upnp layer, see also uprclport for just specifying the port.</descr>
</var>
#uprclhostport = 

# <var name="uprclport" type="string">
# <brief>Uprcl HTTP server port for serving media files.</brief>
# <descr>Port to use for listening for media requests. The listen address will
# be either plgmicrohttphost if it is set, or the first ipv4 address used by the
# upnp layer. Ignored if uprclhostport is set.</descr>
</var>
#uprclport = 9090

# <var name="uprclconfdir" type="dfn">
# <brief>uprcl Recoll index directory</brief>
# <descr>This is usually not defined and defaults to
# /var/cache/upmpdcli/uprcl. The name is a bit misleading because there is
# little real configuration data in there: it's mostly programmatically
# generated from actual configuration found elsewhere (but also see
# uprclconfrecolluser).</descr>
# </var> 
#uprclconfdir = /var/cache/upmpdcli/uprcl

# <var name="uprclconfrecolluser" type="fn">
# <brief>Name of the user Recoll config additions file</brief>
#
# <descr>This is the name of a file with additional parameters for the
# uprcl recoll.conf file, to which the contents will be appended before
# indexing. The default is /var/cache/upmpdcli/uprcl/recoll.conf.user. If
# set, should be an absolute path.</descr>
# </var>
#uprclconfrecolluser = /var/cache/upmpdcli/uprcl/recoll.conf.user

# <var name="uprclminimconfig" type="fn">
# <brief>Name of the Minim Server configuration file</brief>
#
# <descr>If set, this is the name of a Minim Server configuration file from
# which we should fetch parameters like aliasTags, etc. (See the
# manual). Not set by default, and optional.</descr>
# </var>
#uprclminimconfig =

# <var name="uprclnotagview" type="bool">
# <brief>Suppress folder "Tag View" entries.</brief>
# <descr>The "Tag View" entry allow browsing a subdirectory by tags. It can be quite useful but also
# a problem with some Control Points, or kinds of usage.</descr>
# </var>
#uprclnotagview=false

# <var name="uprclpaths" type="string"><brief>Path translations.</brief>
# <descr>Translations from real paths to ones relative to the HTTP server
# doc tree. If this is not set, uprcl will use a null translation for each
# of the uprclmediadirs entries.</descr></var>
#uprclpaths =


# <grouptitle>Upmpdcli Radios plugin parameters</grouptitle>

# <var name="upradiosuser" type="string"><brief>Bogus user name variable.</brief>
# <descr>Used for consistency with other Media Server plugins to decide if
# the service should be started (so, do set it if you want to see the radio list).
# </descr></var>
#upradiosuser = bugsbunny

# <var name="upradiostitle" type="string"> <brief>Plugin Title.</brief><descr>This
# will be displayed as the plugin entry in the Media Server root
# directory.</descr></var>
upradiostitle = Upmpdcli Radio List

# <var name="upradiosmaxthreads" type="int" values="1 10 5">
# <brief>Maximum number of threads to use while initializing the radio list</brief>
# <descr>Most radios are defined by playlist files which may need several network interactions
# before the actual URL usable by the control point can be reached. We use multiple threads to speed
# up this process, this is the maximum thread count.</descr></var>
#upradiosmaxthreads = 5

# <grouptitle>Radio Browser (https://www.radio-browser.info/) plugin parameters</grouptitle>

# <var name="radio-browseruser" type="string"><brief>Bogus user name variable.</brief>
# <descr>Decides if the service should be started. Set it to any arbitrary value.</descr></var>
#radio-browseruser = bugsbunny
# <var name="radio-browsertitle" type="string"> <brief>Plugin Title.</brief><descr>This
# will be displayed as the plugin entry in the Media Server root
# directory.</descr></var>
#radio-browsertitle = Radio Browser
# <var name="radio-browseripinfotoken" type="string"> <brief>IPInfo token.</brief><descr>Set your ipinfo
# token in order to have the shortcut to the local radios.</descr></var>
#radio-browseripinfotoken = your-ipinfo-token
# <var name="radio-browsercountry" type="string"> <brief>The preferred country.</brief><descr>Set this
# to the preferred country in order to have the shortcut to the local radios.
# This is alternative to using the ipinfo token.
# The values is to be specified in the form of a country code, e.g. `FR`, `IT`, etc.</descr></var>
#radio-browsercountry = your-ipinfo-token

# <grouptitle>Radio Paradise (https://www.radioparadise.com/) plugin parameters</grouptitle>

# <var name="radio-paradiseuser" type="string"><brief>Bogus user name variable.</brief>
# <descr>Decides if the service should be started. Set it to any arbitrary value.</descr></var>
#radio-paradiseuser = bugsbunny
# <var name="radio-paradisetitle" type="string"> <brief>Plugin Title.</brief><descr>This
# will be displayed as the plugin entry in the Media Server root
# directory.</descr></var>
#radio-paradisetitle = Radio Paradise

# <grouptitle>Mother Earth Radio (https://www.motherearthradio.de/) plugin parameters</grouptitle>

# <var name="mother-earth-radiouser" type="string"><brief>Bogus user name variable.</brief>
# <descr>Decides if the service should be started. Set it to any arbitrary value.</descr></var>
#mother-earth-radiouser = bugsbunny
# <var name="mother-earth-radiotitle" type="string"> <brief>Plugin Title.</brief><descr>This
# will be displayed as the plugin entry in the Media Server root
# directory.</descr></var>
#mother-earth-radiotitle = Mother Earth Radio

# <grouptitle>SubSonic plugin parameters</grouptitle>

# <var name="subsonicuser" type="string"><brief>SubSonic User name.</brief>
# <descr>Decides if the service should be started. Set it to the appropriate user name.</descr></var>
#subsonicuser = subsonic

# <var name="subsonicpassword" type="string"><brief>SubSonic Password.</brief>
# <descr>Required for SubSonic authentication. Set it to the appropriate password.</descr></var>
#subsonicpassword = subsonicpassword

# <var name="subsoniclegacyauth" type="bool"><brief>SubSonic legacy authentication mode.</brief>
# <descr>Required for SubSonic authentication with some servers (e.g. lms). Set to 1 to enable.
# </descr></var>
#subsoniclegacyauth = 0

# <var name="subsonicuseragent" type="string"><brief>SubSonic user agent.</brief>
# <descr>Lets you specify the user agent in http requests, defaults to upmpdcli.
# </descr></var>
#subsonicuseragent = 0

# <var name="subsonicskipuseragent" type="bool"><brief>Force user agent to be empty.</brief>
# <descr>You might want to enable this one in case the default user agent causes some trouble. YMMV.
# </descr></var>
#subsonicskipuseragent = 0

# <var name="subsonicbaseurl" type="string"><brief>SubSonic server base url.</brief>
# <descr>URL of the server, without the port. Specify http or https</descr></var>
#subsonicbaseurl = http://subsonic.localdomain.local

# <var name="subsonicport" type="int" values="0 65535 4533">
# <brief>SubSonic server port.</brief>
# <descr>The port of the SubSonic server</descr></var>
#subsonicport = 4533

# <var name="subsonicitemsperpage" type="int" values="1 200 36">
# <brief>SubSonic items per page</brief>
# <descr>Number of items per page for SubSonic</descr></var>
#subsonicitemsperpage = 36

# <var name="subsoniccachetimeoutartists" type="int" values="180 1800 600">
# <brief>SubSonic cache timeout for artists</brief>
# <descr>Cache timeout for artists, defaults to 600</descr></var>
#subsoniccachetimeoutartists = 600

# <var name="subsonicappendyeartoalbumcontainer" type="bool">
# <brief>Append year to album container</brief>
# <descr>If enabled, the year will be appended to the album as a container.
# Enabled by default.</descr></var>
#subsonicappendyeartoalbumcontainer = 1

# <var name="subsonicappendyeartoalbumview" type="bool"><brief>Append year to album view</brief>
# <descr>If enabled, the year will be appended to the album view. Disabled by default.</descr></var>
#subsonicappendyeartoalbumview = 0

# <var name="subsonicappendyeartoalbumsearchres" type="bool"><brief>Append year to album as search result</brief>
# <descr>If enabled, the year will be appended to the album as a search result. Disabled by default.</descr></var>
#subsonicappendyeartoalbumsearchres = 0

# <var name="subsonictranscodecodec" type="string"><brief>Enable transcoding</brief>
# <descr>If a value is set, it will be used as the codec for the transcoding process</descr></var>
#subsonictranscodecodec = ogg

# <var name="subsonictranscodemaxbitrate" type="int" values="32 320 320">
# <brief>Set max bitrate for transcoding</brief>
# <descr>If a value is set, it will be used as the max bitrate for the transcoding process</descr>
# </var>
#subsonictranscodemaxbitrate = 320

# <var name="subsonicserversidescrobbling" type="bool"><brief>Enable server-side scrobbling</brief>
# <descr>If enabled, we will scrobble the song when streaming starts. Disabled by default.</descr></var>
#subsonicserversidescrobbling = 0

# <var name="subsonicprependnumberinalbumlist" type="bool">
# <brief>Add a progressive number to album in album lists.</brief>
# <descr>Mostly for Kodi compatibility and usability. Enabled by default.</descr></var>
#subsonicprependnumberinalbumlist = 1

# <var name="subsonictaginitialpageenabledir" type="bool">
# <brief>Subsonic enable Internet Radios</brief>
# <descr>Enables Internet Radios. Disabled by default, upmpdcli offers multiple ways of handling
# Internet Radios</descr></var>
#subsonictaginitialpageenabledir = 0

# <var name="subsonicshowemptyfavorites" type="bool">
# <brief>Subsonic show empty Favorites entries</brief>
# <descr>Force entries for Favorites, even if there are no Favorites, 
# disabled by default</descr></var>
#subsonicshowemptyfavorites = 0

# <var name="subsonicshowemptyplaylists" type="bool">
# <brief>Subsonic show empty Playlists entry</brief>
# <descr>Force entry for Playlists, even if there are no Playlists, 
# disabled by default</descr></var>
#subsonicshowemptyplaylists = 0

# <var name="subsonictitle" type="string"> <brief>Plugin Title.</brief><descr>This
# will be displayed as the plugin entry in the Media Server root
# directory.</descr></var>
#subsonictitle = Subsonic

# <var name="subsonicallowappendgenreinalbumview" type="bool">
# <brief>Subsonic show genres in album view</brief>
# <descr>Show Genres in album view, disabled by defaults</descr></var>
#subsonicallowappendgenreinalbumview = 0

# <var name="subsonicallowgenreinalbumcontainer" type="bool">
# <brief>Subsonic show genres in album container entry</brief>
# <descr>Show Genres in album container, used in album lists, disabled by defaults</descr></var>
#subsonicallowgenreinalbumcontainer = 0

# <var name="subsonicenableimagecaching" type="bool">
# <brief>Enables image caching, requires webdocumentroot</brief>
# <descr>Allows the plugin to cache images from the server, requires
# webdocumentroot and some disk space, recommended</descr></var>
#subsonicenableimagecaching = 0

# <var name="subsonicenablecachedimageagelimit" type="bool">
# <brief>Enables pruning for image cache, requires webdocumentroot</brief>
# <descr>Allows the plugin to remove old cache images from the server, recommended</descr></var>
#subsonicenablecachedimageagelimit = 0

# <var name="subsoniccachedimagemaxagedays" type="int">
# <brief>Age limit for image files in image cache in days</brief>
# <descr>Sets the maximum image file age in days, relevant when pruning is enabled</descr></var>
#subsoniccachedimagemaxagedays = 60

# <grouptitle>Upmpdcli BBC Sounds plugin parameters</grouptitle>

# <var name="bbcuser" type="string"><brief>Bogus user name variable.</brief>
# <descr>Set this to activate the plugin, the value is ignored.
# </descr></var>
#bbcuser = bugsbunny

# <var name="bbcprogrammedays" type="string">
# <brief>Past days in BBC Sounds catalog listing.</brief>
# <descr>This controls how many days are listed in the station displays.</descr></var>
#bbcprogrammedays = 30
# <var name="bbctitle" type="string"> <brief>Plugin Title.</brief><descr>This
# will be displayed as the plugin entry in the Media Server root
# directory.</descr></var>
#bbctitle = Bbc
bbctitle = BBC Sounds

# <grouptitle>Songcast Receiver parameters</grouptitle>

# Parameters for the Songcast modes. These are read by either/both the
# songcast and upmpdcli processes

# <var name="sclogfilename" type="fn"><brief>Log file name for sc2mpd (default
# stderr)</brief><descr>The value *must not* be the same as the one used
# for upmpdcli (except if empty).</descr></var>
#sclogfilename = 

# <var name="scloglevel" type="int" values="0 5 2"><brief>Log verbosity for
# sc2mpd.</brief></var>
#scloglevel = 3

# <var name="scplaymethod" type="cstr" values="mpd alsa"><brief>sc2mpd
# play method (mpd/alsa).</brief><descr>With this set as 'alsa', sc2mpd
# will send the audio directly to the sound driver, which is the only way
# to really avoid skips and control the synchronization in multi-room
# setups. *For 'alsa', make sure that user upmpdcli has permission to
# access the audio devices !*</descr></var>
#scplaymethod = mpd

# <var name="schttpport" type="int" values="0 65635 8768"><brief>Port
# used by sc2mpd for MPD to connect to.</brief><descr>Used only for
# scplaymethod=mpd. sc2mpd only accepts connections from
# localhost.</descr></var>
#schttpport = 8768

# <var name="scalsadevice" type="string"><brief>Alsa device used by sc2mpd
# for playing audio.</brief><descr>Only used for scplaymethod=alsa.
# Use 'aplay -L' to see the possible values.</descr></var>
#scalsadevice = default

# <var name="sccvttype" type="cstr" values="SRC_SINC_FASTEST
# SRC_SINC_BEST_QUALITY SRC_SINC_MEDIUM_QUALITY SRC_ZERO_ORDER_HOLD
# SRC_LINEAR NONE"><brief>sc2mpd resampling method.</brief><descr> 
# Only used for scplaymethod=alsa. sc2mpd uses libsamplerate. The default
# method is SRC_SINC_FASTEST and a Rasberry Pi 1 is fast enough to use it.
# Possible values: SRC_SINC_BEST_QUALITY, SRC_SINC_MEDIUM_QUALITY,
# SRC_SINC_FASTEST, SRC_ZERO_ORDER_HOLD, SRC_LINEAR.  See the libsamplerate
# documentation for descriptions. Anything above SRC_SINC_FASTEST needs a
# serious CPU.  BEST_QUALITY uses approx 25% cpu on a core i7
# 4770T. Obviously too much, actually might not be sustainable (it's almost
# 100% of 1 cpu).  MEDIUM_QUALITY is around 10% on the same machine,
# FASTEST is 4-5%. Given that this is measured for the full process, probably
# a couple % for the conversion in fact. NONE will turn resampling off:
# minimum CPU and best quality, but guaranteed glitches from time
# to time, depending on the clocks skew.</descr></var>
#sccvttype = SRC_SINC_FASTEST

# <var name="scusempdvolume" type="bool">
# <brief>Scale songcast stream based on mpd volume value</brief>
# <descr>Allow controlling the volume from the Control Point by scaling the
# stream according to the mpd volume value. Only works when scplaymethod is 'alsa'.
# </descr></var>
#scusempdvolume = 0

# <var name="sc2mpd" type="string"><brief>Path to
# sc2mpd.</brief><descr>Only useful if it is not in /usr/bin and the
# location is not in the $PATH for the init scripts.</descr></var>
#sc2mpd = 

# <var name="screceiverstatefile" type="string"><brief>Path to a screceiver
# state file.</brief><descr>If set, the sender uri and metadata will be read
# from the file when initializing the Songcast Receiver service and written to
# the file when a Sender is set for the service. Useful for preserving the
# sender information between restarts.</descr></var>
#screceiverstatefile =

# <grouptitle>Songcast Sender parameters</grouptitle>

# Parameters tor the Sender/Receiver mode. Only does anything if
# scplaymethod is alsa

# <var name="scstreamcodec" type="string" values="PCM FLAC OPUS">
# <brief>!!Standard Songcast receivers only support PCM!! Codec to use for
# the network stream.</brief> <descr>Set to empty or PCM to support
# foreign receivers. Or use FLAC or OPUS for lower network
# load.</descr></var>
#scstreamcodec =

# <var name="scsenderpath" type="fn"><brief>Path to starter script</brief>
# <descr>This is normally scmakempdsender which starts the auxiliary mpd
# and the sender process. Empty and searched in the PATH by
# default.</descr></var>
#scsenderpath =

# <var name="scstreamscaled" type="bool" values="1"><brief>Scale the
# Songcast stream.</brief><descr>If set, MPD software volume control will
# be applied to the stream. True by default: using a Control Point to set
# the volume on the upmpdcli instance which started the Sender affects the
# volume for all Receivers.</descr></var>
#scstreamscaled = 1

# <var name="scsendermpdport" type="int" values="0 65635 6700">
# <brief>localhost port to be used by the auxiliary mpd.</brief></var>
#scsendermpdport = 6700

# <var name="scripts_dir" type="dfn"><brief>External sources script
# directory.</brief><descr>Location for the scripts used to set up
# additional external sources. See the Songcast Sender support
# documentation page.</descr></var>
#scripts_dir = /usr/share/upmpdcli/src_scripts

# <var name="scscriptgracesecs" type="int" values="1 1000 2">
# <brief>Grace period to wait for a script process to exit before it is
# forcely killed.</brief>
# <descr>In seconds. Default 2 S.</descr></var>
#scscriptgracesecs = 2

